#!/usr/bin/env python

# Choose the libraries against which Essentia should compile

execfile('SConstruct_environment')

mode = ARGUMENTS.get('mode', 'release')
icc = get_flag('icc', default=False)

def pkgconfig_list(type, libname):
    from subprocess import Popen, PIPE
    return Popen([ 'pkg-config', type, libname ], stdout=PIPE).stdout.read().strip().split()



checkLibs=False
#if any_of(COMMAND_LINE_TARGETS, ['build', 'install', 'package', 'python', 'vamp', 'examples']):
#    checkLibs=True
Export('checkLibs')

#### Library support ###########################################################
#                                                                              #
# This lists the libraries against which Essentia can be compiled.             #
# If you don't want support for a certain library, comment the corresponding   #
# lines or use the appropriate flag on the command line.                       #
#                                                                              #
# Support for FFTW                                                             #
#
if icc: winFfftwLib = 'libfftw3f_sse_Intel_10_1'
else: winFfftwLib = 'libfftw3f-3st'
add_to(conf.LIBS, { 'default': 'fftw3f',
                    'win32'  :  winFfftwLib  })
# Filesystem checks:

if checkLibs:
    if sys.platform in ('win32'):
        sysconf.env['CCFLAGS'] += ['-I'+join(conf.THIRDPARTY, 'include')]
        if not sysconf.CheckLibWithHeader(join(conf.THIRDPARTY, 'lib',winFfftwLib), 'fftw3.h', 'c'):
           print winFfftwLib + ' not found on system. FFTW can be downloaded from http://www.fftw.org)'
           Exit(1)
    else:
      if not sysconf.CheckLibWithHeader('fftw3f', 'fftw3.h', 'c'):
         print 'fftw3f not found on system. FFTW can be downloaded from http://www.fftw.org)'
         Exit(1)

    if not sysconf.CheckCXXHeader('complex'):
       print 'complex.h not found on system.'
       Exit(1)


#                                                                              #
# Support for resampling audio                                                 #
#
if get_flag('use_libsamplerate', default=True):
    if mode=='debug': winLsrLib = 'libsamplerateD'
    else: winLsrLib = 'libsamplerate'
    add_to(conf.LIBS, { 'default': 'samplerate',
                        'win32'  : winLsrLib  })
    if checkLibs:
        if sys.platform in ('win32'):
            if not sysconf.CheckLibWithHeader(join(conf.THIRDPARTY, 'lib',winLsrLib), 'samplerate.h', 'c'):
                print winLsrLib + ' not found on system. Secret Rabbit Code (aka libsamplerate) can be downloaded from http://www.mega-nerd.com/SRC'
                Exit(1)
        else:
            if not sysconf.CheckLibWithHeader('samplerate', 'samplerate.h', 'c'):
                print 'samplerate.h not found on system. Secret Rabbit Code (aka libsamplerate) can be downloaded from http://www.mega-nerd.com/SRC'
                Exit(1)

#                                                                              #
# Support for generic audio files                                              #
#                                                                              #

# in case custom installation of ffmpeg is given:
ffmpeg_install_dir = ARGUMENTS.get('ffmpeg_dir', '')

if get_flag('use_ffmpeg', default=True):
    ffmpeg_libs = ['avformat', 'avcodec', 'avutil']
    conf.LIBS += ffmpeg_libs

    ffmpeg_dir = ''
    if ffmpeg_install_dir:
        ffmpeg_dir = join(ffmpeg_install_dir, 'include')
        conf.LIBPATH += [join(ffmpeg_install_dir, 'lib')]
    else:
    # different versions of ffmpeg put the header files in different places
        if sys.platform in ('linux2'):
            if os.path.exists('/usr/include/libavcodec'):          ffmpeg_dir = '/usr/include'
            elif os.path.exists('/usr/include/ffmpeg/libavcodec'): ffmpeg_dir = '/usr/include/ffmpeg'

        elif sys.platform in ('darwin'):
            if os.path.exists('/usr/local/include/libavcodec')  : ffmpeg_dir = '/usr/local/include'
            elif os.path.exists('/opt/local/include/ffmpeg')    : ffmpeg_dir = '/opt/local/include/ffmpeg'
            elif os.path.exists('/opt/local/include/libavcodec'): ffmpeg_dir = '/opt/local/include'

        elif sys.platform in ['win32', 'cygwin']:
            ffmpeg_dir = join(conf.THIRDPARTY, 'include')

    if sys.platform in ['win32', 'cygwin']:
	if os.path.exists(join(ffmpeg_dir, 'ffmpeg')): ffmpeg_dir = join(ffmpeg_dir, 'ffmpeg')
	conf.CPPPATH += [ffmpeg_dir]
	for lib in ffmpeg_libs:
            header = join(ffmpeg_dir, lib+'.h')
	    if os.path.exists(join(ffmpeg_dir, 'lib'+lib)) :
		includepath = join(ffmpeg_dir, 'lib'+lib)
		header = join(includepath, lib+'.h')
		conf.CPPPATH += [includepath]
		sysconf.env['CCFLAGS'] += ['-I'+includepath]
	    library = join(conf.THIRDPARTY, 'lib', lib)
	    if ffmpeg_install_dir: library = join(ffmpeg_install_dir, 'lib', lib)
            #if not sysconf.CheckLibWithHeader(library, header, 'c'): # windows doesn't seem to find the header...
            if checkLibs and not sysconf.CheckLib(library):
                print library + ' not found on system. ffmpeg can be downloaded from http://ffmpeg.org'
		Exit(1)
	print 'Windows ffmpeg_dir:', ffmpeg_dir

    else:
      if not ffmpeg_dir:
          ffmpeg_dir = '/usr/include/ffmpeg'
          sysconf.env['CCFLAGS'] += ['-I'+ffmpeg_dir]
          for lib in ffmpeg_libs:
              header = join(ffmpeg_dir, lib+'.h')
              if checkLibs and not sysconf.CheckLibWithHeader(lib, header, 'c'):
                  print lib + ' not found on system. Make sure you supplied the absolute path to the ffmpeg installation directory. ffmpeg can be downloaded from http://ffmpeg.org'
                  Exit(1)
          conf.CPPPATH += [ffmpeg_dir]
      else:
          conf.CPPPATH += [ffmpeg_dir]
          sysconf.env['CCFLAGS'] += ['-I'+ffmpeg_dir]
          for lib in ffmpeg_libs:
              path = join(ffmpeg_dir, 'lib'+lib)
              sysconf.env['CCFLAGS'] += ['-I'+path]
              header =  join(path, lib+'.h')
              if checkLibs and not sysconf.CheckLibWithHeader(lib, header, 'c'):
                  print header + ' not found on system. ffmpeg can be downloaded from http://ffmpeg.org'
                  Exit(1)
              conf.CPPPATH += [path]
    conf.FFMPEG_DIR=ffmpeg_install_dir


else:
    conf.ALGOIGNORE += [ 'AudioLoader', 'MonoLoader', 'EqloudLoader', 'EasyLoader',
                         'MonoWriter', 'AudioWriter' ]

#                                                                              #
# Support for reading audio tags using TagLib                                  #
#                                                                              #
if get_flag('use_taglib', default=True):
    if mode=='debug': winTagLib = 'tag_d'
    else: winTagLib = 'tag'
    add_to(conf.LIBS, { 'default': [ 'tag' ],
                        'win32'  : [  winTagLib ] })

    path = ''
    if sys.platform in ('linux2'):
        path = '/usr/include/taglib'

    elif sys.platform in ('darwin'):
        if os.path.exists('/usr/include/taglib'):
            path = '/usr/include/taglib'
        elif os.path.exists('/usr/local/include/taglib'):
            path = '/usr/local/include/taglib'
        elif os.path.exists('/opt/local/include/taglib'):
            path = '/opt/local/include/taglib'

    elif sys.platform in ['win32', 'cygwin']:
          path = conf.THIRDPARTY + os.sep + 'include' + os.sep + 'taglib'

    sysconf.env['CCFLAGS'] += ['-I'+path]
    if sys.platform in ['win32', 'cygwin']:
	header = join(path, 'tag.h')
        lib = join(conf.THIRDPARTY,'lib',winTagLib)
    else:
        lib = 'tag'
	header = join('taglib', 'tag.h')
    if checkLibs and not sysconf.CheckLibWithHeader(lib, header, 'c++'):
        print 'taglib not found on system. Taglib can be downloaded from http://developer.kde.org/~wheeler/taglib.html'
        Exit(1)

    conf.CPPPATH += [path]

else:
    conf.ALGOIGNORE += [ 'MetadataReader' ]


#                                                                              #
# Support for PTHREADS (POSIX THREADS)                                         #
# needed only in windows to compile streaming_ringbuffertofile                 #
#                                                                              #
if get_flag('use_pthread', default=False):
    add_to(conf.LIBS, { 'win32': 'pthreadVSE' })

#                                                                              #
# Support for BZ2-style encryption                                             #
#                                                                              #
if get_flag('use_encryption', default=False):
    #if not sysconf.CheckCHeader('bzlib.h'))
    if checkLibs and not sysconf.CheckLibWithHeader('bz2', 'bzlib.h', 'c'):
        Exit(1)
    conf.LIBS += [ 'bz2' ]
    conf.CPPDEFINES += [ 'ENCRYPTED_OUTPUT' ]


#                                                                              #
# Support for Gaia transformation histories                                    #
#                                                                              #
if get_flag('use_gaia', default=False):
    # FIXME: doesn't work in windows
    if sys.platform in [ 'win32', 'cygwin' ]:
        raise ValueError("Cannot yet have use_gaia=True on Windows")
    else:
        flags = []
        cpppath = []
        for f in pkgconfig_list('--cflags', 'gaia2'):
            if f.startswith('-I'):
                cpppath.append(f[2:])
            else:
                flags.append(f)

        conf.COMMON_CCFLAGS += flags
        conf.CPPPATH += cpppath
        conf.LIBPATH += [ p[2:] for p in pkgconfig_list('--libs-only-L', 'gaia2') ]
        conf.LIBS    += [ p[2:] for p in pkgconfig_list('--libs-only-l', 'gaia2') ]

else:
    conf.ALGOIGNORE += [ 'GaiaTransform' ]


#                                                                              #
# Support for MacOSX SDK 10.4                                                  #
#                                                                              #
if get_flag('use_sdk10.4', default=False):
    add_to(conf.COMMON_CCFLAGS, { 'darwin': [ '-isysroot','/Developer/SDKs/MacOSX10.4u.sdk','-mmacosx-version-min=10.4' ] })

#
# Support for x64 cross compilation
#
if get_flag('win64', default=False):
    conf.ARFLAGS += [ '/machine:x64' ]

#                                                                              #
# Support for streaming using Intel TBB                                        #
#                                                                              #
if get_flag('use_tbb', False):
    conf.LIBS += [ 'tbb' ]
    conf.CPPDEFINES += [ 'ESSENTIA_TBB' ]


    libpath = ''
    if sys.platform in ['linux2', 'darwin']:
        if conf.THIRDPARTY and os.path.exists(join(conf.THIRDPARTY, 'include', 'tbb')):
            path = join(conf.THIRDPARTY, 'include', 'tbb')
            libpath = join(conf.THIRDPARTY,'lib')
        else :
            if os.path.exists('/usr/include/tbb'): path = '/usr/include/tbb'
            else: path = '/usr/local/include/tbb'
	lib = 'tbb'
    elif sys.platform in ['win32', 'cygwin']:
        path = join(conf.THIRDPARTY,'include','tbb')
        libpath = join(conf.THIRDPARTY,'lib')

    if checkLibs:
        if sys.platform in ['win32', 'cygwin'] :
            #if not sysconf.CheckCXXHeader(join(path, 'tbb_stddef.h')):
            if not sysconf.CheckLibWithHeader(join(libpath,'tbb'), join(path, 'tbb_stddef.h'), 'c++'):
                Exit(1)
        else :
            if not sysconf.CheckLibWithHeader('tbb', join(path, 'tbb_stddef.h'), 'c++'):
                Exit(1)

    conf.CPPPATH += [path]
    conf.LIBPATH += [libpath]

add_to(conf.COMMON_CCFLAGS, { 'linux2': '-fno-strict-aliasing',
                              'darwin': '-fno-strict-aliasing'
                              })


if get_flag('strip_documentation', False):
    conf.CPPDEFINES += ['STRIP_DOCUMENTATION']
#                                                                              #
#                                                                              #
#                                                                              #
# Support for pthread in win32                                                 #
if get_flag('use_pthread', True):
    add_to(conf.LIBS, {  'win32': 'pthreadVSE',
                        'cygwin': 'pthreadVSE' })
#                                                                              #
#                                                                              #
################################################################################

if sys.platform in ('darwin') and 'package' not in COMMAND_LINE_TARGETS:
    conf.CPPPATH += ['/usr/local/include','/opt/local/include']
    conf.LIBPATH += [ '/usr/local/lib','/opt/local/lib' ]

add_to(conf.CPPPATH, { 'linux2': '/usr/local/include'})
add_to(conf.LIBPATH, { 'linux2': '/usr/local/lib'})

# centos on x86_64 has /usr/*/lib64...
if os.path.exists('/usr/lib64'):
    add_to(conf.LIBPATH, { 'linux2': '/usr/lib64'})
if os.path.exists('/usr/local/lib64'):
    add_to(conf.LIBPATH, { 'linux2': '/usr/local/lib64'})



# Print BuildConfig object for debug information
if get_flag('info', False):
    for attr in dir(conf):
        print attr, ':', getattr(conf, attr)



#### Debug / Release / Optimized release builds ################################
#                                                                              #
#                                                                              #

if mode == 'debug':
    CCFLAGS = conf.COMMON_CCFLAGS + conf.DEBUG_CCFLAGS
    LINKFLAGS = conf.COMMON_LINKFLAGS + conf.DEBUG_LINKFLAGS

elif mode == 'optimized':
    CCFLAGS = conf.COMMON_CCFLAGS + conf.OPTIMIZED_RELEASE_CCFLAGS
    LINKFLAGS = conf.COMMON_LINKFLAGS + conf.RELEASE_LINKFLAGS

else:
    # default: release, somewhat optimized mode
    CCFLAGS = conf.COMMON_CCFLAGS + conf.RELEASE_CCFLAGS
    LINKFLAGS = conf.COMMON_LINKFLAGS + conf.RELEASE_LINKFLAGS

#                                                                              #
#                                                                              #
################################################################################




#### Build environment creation ################################################
#                                                                              #
#
env = Environment(ARFLAGS = conf.ARFLAGS,
                  CCFLAGS = CCFLAGS, LINKFLAGS = LINKFLAGS,
                  CPPPATH = conf.CPPPATH, CPPDEFINES = conf.CPPDEFINES,
                  LIBPATH = conf.LIBPATH, LIBS = conf.LIBS)

env['ENV']['PATH'] = os.environ['PATH']
#                                                                              #
#                                                                              #
################################################################################




#### Last minute / specific hacks###############################################
#                                                                              #
#                                                                              #

# use a specific compiler/linker if asked previously                           #
# TODO: makes no sense if it is overwritten later!
if 'CXX' in dir(conf): env.Replace(CXX = conf.CXX, CC = conf.CXX)
if 'LD' in dir(conf):  env.Replace(LD = conf.LD)


# import stuff from current environment                                        #
if 'CXX' in os.environ: env.Replace(CXX = os.environ['CXX'])
if sys.platform == 'linux2' or sys.platform == 'darwin':
    if 'DISTCC_HOSTS' in os.environ: env['ENV']['DISTCC_HOSTS'] = os.environ['DISTCC_HOSTS']
    env['ENV']['HOME'] = os.environ['HOME']


# set the C compiler to be the same as C++ (windows needs it reversed)         #
if sys.platform == 'linux2' or sys.platform == 'darwin':
    env.Replace(CC = env['CXX'])
else:
    env.Replace(CXX = env['CC'])

if 'CXX' in dir(conf) and sys.platform=='darwin' :
    env.Replace(CXX = conf.CXX, CC = conf.CXX)
#                                                                              #
#                                                                              #
################################################################################

# in case there some mac ports includes and libs...
#if 'package' in COMMAND_LINE_TARGETS:
#    if sys.platform in ('darwin'):
#        env['ENV']['PATH'] = removeMacPortsFromPath(env['ENV']['PATH'])
#        conf.CPPPATH = removeMacPortsFromPath(conf.CPPPATH)
#        conf.LIBPATH = removeMacPortsFromPath(conf.LIBPATH)
#                                                                              #
#                                                                              #
################################################################################
