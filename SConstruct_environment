#!/usr/bin/env python

# Defines all the platform specific variables and creates the
# correct Environment for building

import os
import sys
import shutil
from sets import Set
from os.path import join

env = Environment()
source_tree_path = os.getcwd()
relative_path = env.GetLaunchDir()
sysconf = Configure(env)

Export('relative_path')
Export('sysconf')


# Imports some useful functions, such as set_root, add_to, etc...
# NB: needs to be done using execfile because it has functions which use
#     ARGUMENTS, which is given by SCons, so it cannot be in an independent
#     module
execfile('scons/utils.py')

# Add path to scons utilities directory, so we can import files in there as modules
sys.path.append(os.getcwd() + '/scons')


# Default config: this is common to all configurations of Essentia
# If you want to add specific flags/options, do it by appending them to the
# corresponding list, such as: RELEASE_FLAGS += [ '-flag1', '-flag2' ]
conf = BuildConfig()

# this variable contains algorithms related to an optional library and which
# should only be compiled if the library is present
conf.ALGOIGNORE = []

conf.OTHER_SOURCES = []

conf.CPPDEFINES = []
conf.ARFLAGS = DefaultEnvironment()['ARFLAGS']
conf.COMMON_CCFLAGS = []
conf.OPTIMIZED_RELEASE_CCFLAGS = []
conf.RELEASE_CCFLAGS = []
conf.DEBUG_CCFLAGS = []

# NB: all src/* get added to the include path so the #include's in the
# headers do not need include the full path, only the name of the header file.
conf.CPPPATH = [ '.',
                 'src/base',
                 'src/streaming',
                 'src/scheduler',
                 'src/streaming/algorithms',
                 'src/utils' ]

if 'package' in COMMAND_LINE_TARGETS:
    if sys.platform in ('darwin'):
        conf.CPPPATH = [ source_tree_path + os.sep + directory for directory in conf.CPPPATH]

conf.COMMON_LINKFLAGS = []
conf.RELEASE_LINKFLAGS = []
conf.DEBUG_LINKFLAGS = []
conf.LIBS = [ 'essentia' ]
# @TODO need to have the path to where the library is built so as to get precedence over the one that's installed in /usr/lib
conf.LIBPATH = [ join(source_tree_path, 'build') ]



# this variable controls whether or not to compile the streaming extensions
conf.USE_STREAMING = True
if ARGUMENTS.get('streaming', 'true')  == 'false':
    conf.USE_STREAMING = False


# this variable controls whether the code is to be compiled as position
# independent code. If essentia is to be compiled for use in python
# (default build), it *has* to be set to True. If compiled for an
# executable it can be left to True, but will be slightly slower
# (plus some unknown effects... check which ones), or can be set to False
COMPILE_AS_PIC = True

# DESTDIR can be used to install the files in a changed root path.
# This is mainly useful for packaging and any installs 'install', 'python_install'.
conf.DESTDIR = '/'
if sys.platform in ('win32','cygwin'):
    # default for these platforms is the drive letter plus the colon
    conf.DESTDIR = os.environ.get('ProgramFiles', os.environ.get('SystemDrive', 'C:'))[:2]+'\\'
conf.DESTDIR = ARGUMENTS.get('destdir', conf.DESTDIR)
conf.DESTDIR = os.path.abspath(conf.DESTDIR)


# PREFIX is used to install files in a specific base directory
conf.PREFIX = 'usr/local'
if sys.platform in ('win32', 'cygwin'):
    # default for these platforms is 'Program Files\Essentia'
    conf.PREFIX = join( os.environ.get('ProgramFiles', 'C:\\Progam Files')[3:], 'Essentia' )

conf.PREFIX = ARGUMENTS.get('prefix', conf.PREFIX)


# THIRDPARTY - windows and darwin only, the parent folder of lib, bin, include which hold
# thirdparty software that parts of essentia depends on
conf.THIRDPARTY = ''
if sys.platform in ('win32', 'cygwin'):
    #conf.THIRDPARTY = join('..','essentia-thirdparty-msvc2005sp1-32bit')
    conf.THIRDPARTY = join('..','new-essentia-thirdparty')
    conf.THIRDPARTY = ARGUMENTS.get('thirdparty', conf.THIRDPARTY)
    conf.THIRDPARTY = os.path.abspath(conf.THIRDPARTY)
    if not os.path.isdir(conf.THIRDPARTY):
        print('WARNING: the path to thirdparty software does not exist: ' + conf.THIRDPARTY)

if sys.platform in ('darwin'):
    conf.THIRDPARTY = ARGUMENTS.get('thirdparty', conf.THIRDPARTY)
    if conf.THIRDPARTY and not os.path.isdir(conf.THIRDPARTY):
        print('WARNING: the path to thirdparty software does not exist: ' + conf.THIRDPARTY)



# Do we want to use the Intel compiler?
icc = get_flag('icc', default=False)
if icc:
    exec(fetch_env_variable('INTEL_COMPILER_PATH'))

# Do we want to generate profiling information?
prof_genx = get_flag('prof_genx', default=False)


#### Compiler flags ############################################################
#                                                                              #
# Version                                                                      #
#                                                                              #
vfh = open('VERSION', mode='r')
version = vfh.read().strip()
vfh.close()

#                                                                              #
# Linux & Mac OS X / GCC                                                       #
#                                                                              #
if sys.platform in ('linux2', 'darwin'):

    conf.COMMON_CCFLAGS += [ '-pipe', '-Wall', '-Wno-deprecated-declarations', '-D"ESSENTIA_VERSION"="\\"%s\\""' % version ]
    conf.COMMON_CCFLAGS += [ '-D__STDC_CONSTANT_MACROS' ] # this for the 'INT64_C: identifier not found' error from audiowriter.cpp

    if COMPILE_AS_PIC: conf.COMMON_CCFLAGS += [ '-fPIC' ]

    conf.OPTIMIZED_RELEASE_CCFLAGS += [ '-O3', '-DNDEBUG', '-ffast-math' ]
    conf.OPTIMIZED_RELEASE_CCFLAGS += [ '-march=native', '-msse3', '-mfpmath=sse' ]
    conf.OPTIMIZED_RELEASE_CCFLAGS += [ '-fomit-frame-pointer', '-funroll-loops' ]

    conf.RELEASE_CCFLAGS += [ '-O2' ]
    conf.DEBUG_CCFLAGS = [ '-g' ]

    if sys.platform == 'darwin':
        target=os.environ.get('MACOSX_DEPLOYMENT_TARGET')
        if not target:
             print 'Could not determine MACOSX_DEPLOYMENT_TARGET'
             sys.exit(1)
        else:
            sdk=target
            if target=='10.4':
                sdk='10.4u'
                conf.CXX='g++-4.0'
            print 'MACOSX_DEPLOYMENT_TARGET=', target
            conf.COMMON_CCFLAGS += [ '-isysroot','/Developer/SDKs/MacOSX' +sdk+'.sdk','-mmacosx-version-min='+target ]
            conf.COMMON_LINKFLAGS += [ '-isysroot','/Developer/SDKs/MacOSX'+sdk+'.sdk','-mmacosx-version-min='+target ]

    crosscompilei386 = ARGUMENTS.get('crosscompilei386', 'false')
    if sys.platform == 'darwin':
        if crosscompilei386 == 'true':
            conf.COMMON_CCFLAGS += [ '-arch', 'i386' ]
            conf.COMMON_LINKFLAGS += [ '-arch', 'i386' ]

    crosscompileppc = ARGUMENTS.get('crosscompileppc', 'false')
    if sys.platform == 'darwin':
        if crosscompileppc == 'true':
            conf.COMMON_CCFLAGS += [ '-arch', 'ppc' ]
            conf.COMMON_LINKFLAGS += [ '-arch', 'ppc' ]

    if sys.platform == 'linux2':
        conf.COMMON_LINKFLAGS += [ '-Wl,--as-needed' ]

        if int(gcc_version()[0]) >= 4:
            conf.COMMON_CCFLAGS += [ '-fvisibility=hidden' ]

    if sys.platform == 'darwin' and conf.THIRDPARTY:
        conf.CPPPATH += [ conf.THIRDPARTY + os.sep + 'include' ]
        conf.LIBPATH += [ conf.THIRDPARTY + os.sep + 'lib' ]



#                                                                              #
# Linux / Intel compiler                                                       #
#                                                                              #
    if sys.platform == 'linux2' and icc:

        if not os.path.isfile(join(INTEL_COMPILER_PATH, 'bin/icc')):
            raise EnvironmentError('Could not find icc (Intel compiler)')

        conf.CXX = join(INTEL_COMPILER_PATH, 'bin/icc')
        conf.LD = join(INTEL_COMPILER_PATH, 'bin/xild')

        # remove remarks (weak warnings)
        conf.COMMON_CCFLAGS += [ '-wd981,383,444,869,1125,1418,1572,810,1683,654,424,858,522,310,1419,111' ]
        if prof_genx:
            conf.COMMON_CCFLAGS += [ '-prof-genx' ]
        conf.RELEASE_CCFLAGS += [ '-xO', '-fp-model', 'fast' ]

        conf.RELEASE_LINKFLAGS += [ '-xO' ]

        conf.LIBS += [ 'stdc++' ]
        conf.LIBPATH += [ join(INTEL_COMPILER_PATH, 'lib') ]

#                                                                              #
# Windows / MSVC                                                               #
#                                                                              #
elif sys.platform in ('win32', 'cygwin'):
    vsconf = ARGUMENTS.get('vsconf')
    print "Visual Studio Configuration: ", vsconf

    conf.CPPDEFINES += [ '_USE_MATH_DEFINES', '_CRT_SECURE_NO_WARNINGS' ]

    conf.COMMON_CCFLAGS += [ '/EHsc', '/nologo', '/Wp64', '/W3', '/WX', '/DESSENTIA_VERSION=\\"%s\\"' % version, '/DYY_NEVER_INTERACTIVE' ]
    conf.COMMON_CCFLAGS += [ '/wd4503' ] # to disable annoying 'decorated name length exceeded' warning, this might be a VS only flag though
    conf.COMMON_CCFLAGS += [ '/D__STDC_CONSTANT_MACROS' ] # this for the 'INT64_C: identifier not found' error from audiowriter.cpp
    conf.COMMON_CCFLAGS += [ '/D_CRT_SECURE_NO_DEPRECATE' ] # fscanf and fopen are deprecated in the MS CRT, this is to silence it
    conf.RELEASE_CCFLAGS += [ '/DNDEBUG', '/DWIN32', '/GR', '/FD', '/MD', '/TP', '/O2' ]

    mode = ARGUMENTS.get('mode', 'release')

    if mode == 'debug':
        if vsconf != None:
            DebugFolder = 'build/' + vsconf
        else:
            DebugFolder = "build/Debug"
            if os.path.exists(DebugFolder):
                print "folder already exists"
            else:
                os.mkdir(DebugFolder);

        conf.DEBUG_CCFLAGS += [ '/DEBUG', '/DDEBUG', '/D_DEBUG', '/Od', '/D"_MBCS"', '/RTC1',
                                '/MDd', '/FR"' + DebugFolder + '/"', '/Zi', '/TP' ]
        conf.DEBUG_LINKFLAGS += [ '/DEBUG' ]

    conf.COMMON_LINKFLAGS += [ '/NODEFAULTLIB:LIBCMT' ]

    # add path to locally stored 3rd party libraries
    conf.CPPPATH += [ conf.THIRDPARTY + os.sep + 'include' ]
    conf.LIBPATH += [ conf.THIRDPARTY + os.sep + 'lib' ]


#                                                                              #
# Windows / Intel Compiler                                                     #
#                                                                              #
    if icc:
        if not os.path.isfile(join(INTEL_COMPILER_PATH, 'Bin/icl.exe')):
            raise EnvironmentError('Could not find icc (Intel compiler)')

        conf.CXX = '"' + join(INTEL_COMPILER_PATH, 'Bin/icl.exe') + '"'
        conf.LD = join(INTEL_COMPILER_PATH, 'Bin/xilib.exe')

        # remove remarks (weak warnings)
        conf.COMMON_CCFLAGS += [ '-Qwd981,383,444,869,1125,1418,1572,810,1683,239,1786' ]
        if prof_genx:
            conf.COMMON_CCFLAGS += [ '/Qprof-genx' ]

        conf.RELEASE_CCFLAGS += [ '/O3', '/Qipo' ]
        conf.RELEASE_LINKFLAGS += [ '-xN' ]

        conf.LIBPATH += [ join(INTEL_COMPILER_PATH, 'Lib') ]


#                                                                              #
# Unsupported configuration                                                    #
#                                                                              #
else:
    print "Don't know how to build for platform", sys.platform

#                                                                              #
#                                                                              #
################################################################################




#### Python & NumPy information ################################################
# Automatically detect python version number
conf.PYTHON_VERSION = sys.version[:3]

#                                                                              #
# Linux                                                                        #
#                                                                              #
if sys.platform == 'linux2':
    conf.PYTHON_INCLUDE_PATH = '/usr/include/python' + conf.PYTHON_VERSION
    conf.PYTHON_LINK_PATH = ''

    # This is kind of ugly, but is the most cross-distro that we could get
    INCPATHS = [ '/usr/share/python-support/python-numpy/numpy/core/include/numpy',
                 '/usr/share/pyshared/numpy/core/include/numpy',
                 '/usr/lib/pyshared/python' + conf.PYTHON_VERSION + '/numpy/core/include/numpy/',
                 '/usr/lib64/python' + conf.PYTHON_VERSION + '/site-packages/numpy/core/include/numpy',
                 '/usr/lib/python' + conf.PYTHON_VERSION + '/site-packages/numpy/core/include/numpy'
                 ]

    conf.NUMPY_INCLUDE_PATH = filter(os.path.exists, INCPATHS)

#                                                                              #
# Mac OS X                                                                     #
#                                                                              #
elif sys.platform == "darwin":
    conf.PYTHON_INCLUDE_PATH = '/Library/Frameworks/Python.framework/Versions/Current/include/python' + conf.PYTHON_VERSION
    conf.PYTHON_LINK_PATH = '/Library/Frameworks/Python.framework/Versions/Current/lib/python' + conf.PYTHON_VERSION
    conf.NUMPY_INCLUDE_PATH = conf.PYTHON_LINK_PATH + '/site-packages/numpy/core/include/numpy'
    conf.PYTHON_INSTALL_PATH=join('/Library/Frameworks/Python.framework/Versions', conf.PYTHON_VERSION, 'lib/python'+conf.PYTHON_VERSION)

#                                                                              #
# Windows / MSVC                                                               #
#                                                                              #
elif sys.platform in [ 'win32', 'cygwin' ]:
    conf.PYTHON_DIR = join('C:\\','Python'+conf.PYTHON_VERSION.replace('.', ''))
    conf.PYTHON_INCLUDE_PATH = join(conf.PYTHON_DIR, 'include')
    conf.NUMPY_INCLUDE_PATH = join(conf.PYTHON_DIR, 'Lib/site-packages/numpy/core/include/numpy')
    conf.PYTHON_LINK_PATH = join(conf.PYTHON_DIR, 'libs')

#                                                                              #
#                                                                              #
################################################################################
