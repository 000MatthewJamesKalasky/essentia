#!/usr/bin/env python

Import('ran_scripts')
if 'packaging/SConscript' in ran_scripts: Return()
ran_scripts.append('packaging/SConscript')

import subprocess
import sys, os, glob
import os.path
from os.path import join

Import('env', 'conf','source_tree_path')

if sys.platform in ('darwin',):
    # before being able to call scons package, scons python_install is needed
    # Use the thirdparty libs and headers when packaging for darwin
    # Summarising:
    #   - in order to produce darwin package:
    #	      scons destdir=essentia_dest_dir package
    #   - thirparty libs and headers must be included in a third_party folder inside essentia_dest_dir
    if sys.platform in ('darwin') and 'package' in COMMAND_LINE_TARGETS:
        conf.THIRDPARTY = join(conf.DESTDIR,'third_party')
        conf.THIRDPARTY = ARGUMENTS.get('thirdparty', conf.THIRDPARTY)
        conf.THIRDPARTY = os.path.abspath(conf.THIRDPARTY)

    if not os.path.isdir(conf.THIRDPARTY):
        print('WARNING: packaging for darwin, requires the path to thirdparty libraries.' +\
              'The path does not exist: ' + conf.THIRDPARTY + \
              '\n\tprecompiled third party libraries should be included in the destination folder: ' +\
              '\"' + conf.DESTDIR + '\"' + '\n\tPrecompiled libraries for os x can be downloaded from: ' + \
              'https://mtgdb.iua.upf.edu/downloads/osx')

    # remove any dependency on /opt and /local:
    thirdparty_libs = ['taglib', 'libavutil', 'libavcodec', 'libavformat', 'tbb']
    for lib in thirdparty_libs:
        for path in env['ENV']['PATH']:
            if lib in path:
                env['ENV']['PATH'].remove(path)
        for path in env['CPPPATH']:
            if lib in path:
                env['CPPPATH'].remove(path)

    for path in env['ENV']['PATH']:
        if 'local' in path:
            env['PATH'].remove(path)
    for path in env['CPPPATH']:
        if 'local' in path:
            env['CPPPATH'].remove(path)

    for lib in conf.LIBPATH:
        if '/local' in lib or '/opt' in lib:
            conf.LIBPATH.remove(lib)
    for lib in env['LIBPATH']:
        if '/local' in lib or '/opt' in lib:
            env['LIBPATH'].remove(lib)

    env.Prepend( LIBPATH = [ join(conf.THIRDPARTY,'lib'), join(source_tree_path, 'build') ],
                 CPPPATH = [ join(conf.THIRDPARTY,'include'),
                             [join(conf.THIRDPARTY, 'include', lib) for lib in thirdparty_libs]])

# Set destdir to build so we can dump here temporarily
conf.DESTDIR = join(source_tree_path,'build')
conf.PREFIX = 'packaging'


### Run dependencies ###
SConscript(join('..','src','SConscript'))
SConscript(join('..','src','python','SConscript'))
SConscript(join('..','src','examples','SConscript'))
SConscript(join('..','doc','SConscript'))

# Build dependencies
if sys.platform in ['win32']:
    env.Alias('package', ['install', 'python_install', 'doc', 'examples'])
else: env.Alias('package', ['install', 'python_install', 'vamp', 'doc', 'examples'])

# copy documentation, examples, tests and do some administration
# tasks (cleaning, chown,etc) in conf.DESTDIR:
# all the work is done by packaging/darwin/darwin_build_tools,
# as it is easier to do it in normal python than scons
# if a directory named 'documentation' already exists in conf.DESTDIR
# you will have to delete it first. This may happen if you run 'scons package' twice
if sys.platform in ('darwin',):
    darwin_tools = join(source_tree_path, 'packaging', 'darwin', 'darwin_build_tools.py')
    conf.DESTDIR=ARGUMENTS.get('destdir','')
    build_dir = join(source_tree_path, 'build')
    cmd = darwin_tools + ' ' + build_dir + ' ' + conf.DESTDIR
    env['BUILDERS']['CopyFiles'] = Builder(action=cmd)
    source = glob.glob(join(source_tree_path, 'build', 'doc', 'doxygen', 'html', '\*'))
    #if os.path.exists(join(conf.DESTDIR, 'documentation')):
    #    subprocess.call(['rm', '-rf', 'documentation'])
    target = join(conf.DESTDIR, 'documentation')
    env.CopyFiles(target, source) # source is not important it only neds to exist
    package_alias = env.Alias('package', target)

if sys.platform in ['win32']:
    # Remember that you should supply absolute paths to ffmpeg_dir and thirdparty directories
    # call makensis to create installer file
    cmd = env.Command(join('..','build','packaging','install_essentia.exe'),
                      join('win32', 'main.nsi'),
                      'makensis /DTHIRDPARTY="'+conf.THIRDPARTY+ '" /DFFMPEG_DIR="'+conf.FFMPEG_DIR+'" $SOURCE')

    env.Alias('package', cmd)
