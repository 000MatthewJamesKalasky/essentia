#!/usr/bin/env python

import sys
from algorithms_info import get_all_algorithms
from sets import Set
from os.path import join
import os

Import('source_tree_path', 'env', 'conf', 'algorithms')
global_env = env
env = env.Clone()

def create_registration_cpp(all_algos, registration_filename, use_streaming = False):

    cpp_code = "#include \"algorithmfactory.h\"\n"

    # write #include's
    for algo in all_algos:
        if all_algos[algo]['has_standard'] or (use_streaming and all_algos[algo]['has_streaming']):
            cpp_code += '#include "%s"\n' % all_algos[algo]['header']

    # register standard algorithms in factory
    cpp_code += "\nnamespace essentia {\nnamespace standard {\n\nESSENTIA_API void registerAlgorithm() {\n"

    for algo in all_algos:
        if all_algos[algo]['has_standard']:
            cpp_code += "    AlgorithmFactory::Registrar<%s> reg%s;\n" % (algo, algo)

    cpp_code += "}}}\n"

    cpp_code += "\n"
    cpp_code += "\n"

    # register streaming algorithms in factory
    if use_streaming:
        cpp_code += "\nnamespace essentia {\nnamespace streaming {\n\nESSENTIA_API void registerAlgorithm() {\n"

        for algo in all_algos:
            if all_algos[algo]['has_streaming']:
                if all_algos[algo]['has_standard']:
                    cpp_code += "    AlgorithmFactory::Registrar<%s, essentia::standard::%s> reg%s;\n" % (algo, algo, algo)
                else:
                    cpp_code += "    AlgorithmFactory::Registrar<%s> reg%s;\n" % (algo, algo)

        cpp_code += "}}}\n"

    file(registration_filename, "w").write(cpp_code)


algo_dir = join(source_tree_path,'src','algorithms')
bld_dir = join(source_tree_path,'build')


### Define build targets ###

# First thing we need to build is the registration .cpp
registration_filename = join(bld_dir,'algorithms','essentia_algorithms_reg.cpp')

def bldReg(target, source, env):
    create_registration_cpp(algorithms, registration_filename, conf.USE_STREAMING)

bldRegCmd = env.Command(registration_filename, [], bldReg)
# It's difficult to determine when the registration file should be remade because it depends on
# two things that are difficult to persist between builds (well only the first one is hard to
# persist): the algoinclude/ignore arguments and the .h files of the included/ignored algorithms.
# Instead, we just build every time. Fixing this problem would speed up the build.
AlwaysBuild(bldRegCmd)

# Objectify the registration file
objs = [ env.Object(join(bld_dir,'algorithms','essentia_algorithms_reg'), registration_filename) ]

# Objectify all of the algorithms
for (algoname, algorithm) in algorithms.items():
    # algoid is category/name (e.g. spectral/barkbands)
    algoid = os.sep.join(algorithm['source'].split(os.sep)[-2:])[:-4]
    objs.append( env.Object( join(bld_dir,'algorithms',algoid), algoid+'.cpp' ) )
#                                                                              #
#                                                                              #
################################################################################

### Add any external utils for algos ###
util_idir = join('..','utils')
util_odir = join(bld_dir,'utils')

objs.append(env.Object(join(util_odir,'asciidag'),
                       join(util_idir,'asciidag.cpp')))
objs.append(env.Object(join(util_odir,'asciidagparser'),
                       join(util_idir,'asciidagparser.cpp')))


# SvmClassifier
if 'SvmClassifier' in algorithms.keys():
    env.Append( CPPPATH = [join(util_idir, 'libsvm')] )
    objs.append( env.Object(join(util_odir,'libsvm','svm'), join(util_idir,'libsvm','svm.cpp')) )
    objs.append( env.Object(join(util_odir,'essentiasvm'), join(util_idir,'essentiasvm.cpp')) )

# YamlInput
if 'YamlInput' in algorithms.keys():
    if sys.platform == 'win32':
        env.Append( CPPDEFINES = ['YAML_DECLARE_STATIC'] )
    global_env.Append( LIBS = 'yaml' )
    objs.append( env.Object(join(util_odir,'yamlast'), join(util_idir,'yamlast.cpp')) )

if 'AudioWriter' in algorithms.keys() or \
   'MonoWriter' in algorithms.keys():
    objs.append( env.Object( join(util_odir,'audiocontext'), join(util_idir,'audiocontext.cpp') ) )

if 'Spline' in algorithms.keys():
    objs.append( env.Object(join(util_odir,'splineutil'), join(util_idir,'splineutil.c')) )

Return('objs')
