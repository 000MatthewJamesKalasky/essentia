#!/usr/bin/env python
# -*- coding: utf-8 -*-


def options(opt):
    opt.add_option('--with-examples', action='store_true',
                   dest='WITH_EXAMPLES', default=False,
                   help='Also build the example programs')
    opt.add_option('--with-python', action='store_true',
                   dest='WITH_PYTHON', default=False,
                   help='Also build the python bindings')


def configure(conf):
    conf.env.WITH_EXAMPLES = conf.options.WITH_EXAMPLES
    conf.env.WITH_PYTHON = conf.options.WITH_PYTHON

    if conf.env.WITH_PYTHON:
        conf.recurse('python')


def build(bld):
    print('â†’ building from ' + bld.path.abspath())
    #print('  BUILD ENV:\n%s' % bld.env)

    def F(folder):
        return bld.srcnode.find_dir(folder)

    def files_in_folder(folder, exts=('.cpp',)):
        result = []
        for ext in exts:
            result.extend(F(folder).ant_glob('**/*' + ext))
        return result

    def dirs_in_folder(folder):
        return [ F(folder) ] + F(folder).ant_glob('**', dir=True, src=False)

    sources = bld.path.ant_glob('*.cpp') # files_in_dir(join(base_dir, '..', 'scheduler'), '*.cpp')

    print 'S', sources
    bld.stlib(
        source   = sources,
        target   = 'essentia_stlib',

        #includes = includes
    )

    #bld.recurse('unittest')

    if bld.env.WITH_EXAMPLES:
        bld.recurse('examples')

    if bld.env.WITH_PYTHON:
        bld.recurse('python')