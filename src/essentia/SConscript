#!/usr/bin/env python

import sys
from os.path import join

Import('env', 'source_tree_path', 'files_in_dir', 'conf')
base_env = env.Clone()

# gather header and object files from the 'base' dir
base_dir = '.'
bld_dir = join(source_tree_path,'build','base')

# relevant header files
headers = files_in_dir(base_dir, '*.h')
tnt_headers = files_in_dir(join(source_tree_path,'src','utils','tnt'), '*.h')
spline_header = join(source_tree_path,'src','utils','splineutil.h')
spline_source = join(source_tree_path,'src','utils','splineutil.c')

# header installers
if sys.platform in ('win32'):
    INCLUDE_PATH = join(conf.DESTDIR, conf.PREFIX, 'include')
else:
    INCLUDE_PATH = join(conf.DESTDIR, conf.PREFIX, 'include', 'essentia')
installers = [base_env.Install( INCLUDE_PATH, header ) for header in headers]
installers += [base_env.Install( join(INCLUDE_PATH,'tnt'), header ) for header in tnt_headers]
installers += [base_env.Install( INCLUDE_PATH, spline_header)]

# relevant objects
sources = files_in_dir(base_dir, '*.cpp') + files_in_dir(join(base_dir, '..', 'scheduler'), '*.cpp')
objects = [ base_env.Object(join(bld_dir,source[:-4]), source) for source in sources ]

# return results
result = (installers, objects)
Return('result')
