#!/usr/bin/env python

Import('ran_scripts')
Import('checkLibs')
if 'src/examples/SConscript' in ran_scripts: Return()
ran_scripts.append('src/examples/SConscript')

import os
import sys
import subprocess
from os.path import join
import platform

### Import the environment & the config ###
Import('env', 'conf', 'source_tree_path', 'algorithms', 'sysconf')
env = env.Clone()
bld_dir = join(source_tree_path,'build','examples')
src_dir = join(source_tree_path, 'src', 'examples')
if 'YamlInput' in algorithms.keys(): env.Append( LIBS=['yaml'] )

### to get the get_flag helper function
execfile('../../scons/utils.py')

### Run dependencies ###
SConscript(join('..','SConscript'))
env.Alias('examples','build')
env.Alias('static_examples','build')

def build_static(env, prefix, prog_name, other = []):
    name = prefix + '_' + prog_name
    print '*'*100
    print 'Building', name
    print 'Please make sure you called "scons examples" before calling "scons static_examples"'
    print 'Also note that this will only work if you compiled Essentia with use_tbb=false.'
    print

    if platform.system() != 'Linux':
        print 'Statically linked examples are only available for linux platform'
        sys.exit(1)

    if platform.machine() == 'x86_64':
        libstdc='/usr/lib/gcc/x86_64-linux-gnu/4.4/libstdc++.a'
        slib_dir = join(source_tree_path, 'packaging', 'linux', 'essentia_static_libs', 'amd64')
    elif platform.machine() in ['i386', 'i686']:
        libstdc='/usr/lib/gcc/i486-linux-gnu/4.4/libstdc++.a'
        slib_dir = join(source_tree_path, 'packaging', 'linux', 'essentia_static_libs', 'i386')

    static_libs = join(slib_dir, 'libtag.a')

    if get_flag('use_gaia', default=False):
        # Qt not distributed as a static lib anymore in debian squeeze
        static_libs += ' /usr/lib/libgaia2.a ' + join(slib_dir, 'libQtCore.a')
        qtlibs = [ 'libpcre.a', 'libyaml.a', 'libgthread-2.0.a', 'libglib-2.0.a'  ]
        for lib in qtlibs: static_libs += ' /usr/lib/' + lib

    libs = ['libfftw3f.a', 'libsamplerate.a', 'libavformat.a', 'libavcodec.a', 'libavutil.a', 'libyaml.a',
            'libbz2.a', 'libz.a', 'libm.a', 'libopencore-amrnb.a', 'libopencore-amrwb.a', 'libfaac.a', 'libfaad.a',
            'libgsm.a', 'libmp3lame.a', 'libopenjpeg.a', 'libschroedinger-1.0.a', 'libdirac_encoder.a', 'libspeex.a',
            'libtheora.a', 'libvorbisenc.a', 'libvorbis.a', 'libx264.a', 'libxvidcore.a', 'liborc-0.4.a', 'libogg.a',
            'libm.a', 'libpthread.a', 'libc.a']
    for lib in libs: static_libs += ' ' + join('/usr/lib', lib)
    static_libs += ' ' + libstdc
    static_libs += ' -ldl -lrt'

    cmd = 'g++ -static -o build/examples/%s -Wl,--as-needed build/examples/%s.o ' %(name,name)
    for obj in other:
        obj = prefix + '_' + obj
        cmd += 'build/examples/%s.o '%obj
    cmd += '-Lbuild -L. -L/usr/local/lib -lessentia '
    cmd += static_libs
    print cmd
    env['BUILDERS']['build_static_examples'] = Builder(action=cmd)
    source = 'src/examples/' + name
    target = 'build/examples/' + name

    #return env.build_static_examples(name, name+'.o')
    cmd = 'cd ../..; ' + cmd
    os.system(cmd)


### Build examples ###
def build_example(env, prefix, prog_name, other = []):
    files = [ prefix + '_' + prog_name + '.cpp' ]
    for f in other:
        files += [ prefix + '_' + f + '.cpp' ]


    objs = [env.Object(join(bld_dir,f[:-4]), f) for f in files]
    #prog = env.Program(join(bld_dir, prefix+'_'+prog_name), objs)
    if 'static_examples' in COMMAND_LINE_TARGETS and sys.platform=='linux2':
        prog = build_static(env, prefix, prog_name, other)
        env.Alias('static_examples', prog)

    if 'static_examples' not in COMMAND_LINE_TARGETS:
        prog = env.Program(join(bld_dir, prefix+'_'+prog_name), objs)
        env.Alias('examples', prog)


    if sys.platform == 'win32':
        # we need to manually embed the manifest
        env.AddPostAction(prog, 'mt.exe -outputresource:"'+join(bld_dir, prefix+'_'+prog_name+'.exe"')+\
                                ';2 -manifest "'+join(bld_dir, prefix+'_'+prog_name)+'.exe.manifest"' )



if ('package' in COMMAND_LINE_TARGETS or 'vamp' in COMMAND_LINE_TARGETS):
    if checkLibs and not sysconf.CheckLibWithHeader('vamp-sdk', 'vamp/vamp.h', 'c'):
        print 'vamp library not found on your system, please download vamp-sdk from http://www.vamp-plugins.org/develop.html'
        Exit(1)
    import glob
    vampenv = env.Clone()
    if sys.platform in ['win32']:
        vampenv.Append(LINKFLAGS='/EXPORT:vampGetPluginDescriptor')
        vampenv.Prepend(LIBS = 'VampPluginSDK')
    else: vampenv.Prepend(LIBS = 'vamp-sdk')
    vampplugin = vampenv.SharedLibrary('vamp_essentia',
                                       glob.glob('vamp*.cpp'))
    env.Alias('vamp', vampplugin)

build_example(env, 'standard', 'beatsmarker')
build_example(env, 'standard', 'tempotap')
build_example(env, 'standard', 'mfcc')
build_example(env, 'standard', 'onsetrate')
build_example(env, 'standard', 'extractorpitch')
build_example(env, 'standard', 'fadedetection')
build_example(env, 'standard', 'spectralcontrast')
build_example(env, 'standard', 'rhythmtransform')

build_example(env, 'streaming', 'extractor',
                              [ 'extractorutils',
                                'extractortonal',
                                'extractorlowlevel',
                                'extractorbeattrack',
                                'extractorsfx',
                                'extractorpanning',
                                'extractorpostprocess' ])

build_example(env, 'streaming', 'extractor_short_sounds',
                              [ 'extractorutils',
                                'extractortonal',
                                'extractorlowlevel',
                                'extractorsfx',
                                'extractorpanning',
                                'extractorpostprocess' ])

build_example(env, 'streaming', 'schizo_extractor',
                              [ 'extractorutils',
                                'extractortonal',
                                'extractorlowlevel',
                                'extractorsfx',
                                'extractorpanning',
                                'extractorpostprocess' ])

build_example(env, 'streaming', 'extractor_canoris',
                              [ 'extractorutils',
                                'extractortonal',
                                'extractorlowlevel',
                                'extractorsfx',
                                'extractorpanning',
                                'extractorpostprocess' ])


build_example(env, 'streaming', 'beattrack')
build_example(env, 'streaming', 'beatsmarker')
build_example(env, 'streaming', 'mfcc')
build_example(env, 'streaming', 'gfcc')
build_example(env, 'streaming', 'rhythmextractor')
build_example(env, 'streaming', 'onsetrate')
build_example(env, 'streaming', 'panning')
build_example(env, 'streaming', 'extractorkey')
build_example(env, 'streaming', 'extractorpitch')
build_example(env, 'streaming', 'extractorpredominantmelody')


#build my files
#build_example(env, 'onset', 'detector')

#build_example(env, 'streaming', 'refactor')

def copy_svm_models(target, source, env):
    status = subprocess.call(['cp', '-r', str(source[0]), str(target[0])])

def svm_models(target, source):
    env.Command(target, source, copy_svm_models)
    env.Alias('build', target)

svm_models(join(bld_dir, 'svm_models'), join(src_dir, 'svm_models'))

if 'run_examples' in COMMAND_LINE_TARGETS:

    def run_example(env, prefix, prog_name, other = []):
        file = prefix + '_' + prog_name

        command = []
        command += [join(bld_dir,file)]
        if sys.platform in ['win32', 'cygwin']:
            command[0] += '.exe'
        for f in other:
            command += [f]
        print 'running', file

        status = subprocess.call(command, stdout=subprocess.PIPE)
        if status == 0:
           print 'OK'
        else:
           print 'FAIL'
           sys.exit(1)

    audio_file = '../../test/audio/recorded/britney.wav'
    beat_file = '../../test/audio/recorded/britney_beat.wav'
    profile_file = 'profiles/all_config.yaml'
    input_file = audio_file
    output_file = 'run_examples_output.yaml'
    output_ticks_file = 'run_examples_ticks_output.txt'
    neq_output_file = output_file.split('.')[0] + '..neq.sig'

    print '\nRunning examples:'
    print '-'*70

    run_example(env, 'standard', 'tempotap', [input_file])
    run_example(env, 'standard', 'mfcc', [input_file, output_file])
    run_example(env, 'standard', 'gfcc', [input_file, output_file])
    run_example(env, 'standard', 'onsetrate', [input_file])
    run_example(env, 'standard', 'extractorpitch', [input_file, output_file])
    run_example(env, 'standard', 'fadedetection', [input_file, output_file])
    run_example(env, 'standard', 'spectralcontrast', [input_file, output_file])
    run_example(env, 'standard', 'rhythmtransform', [input_file, output_file])
    run_example(env, 'streaming', 'extractor', [input_file, output_file, profile_file])
    #run_example(env, 'streaming', 'extractor_short_sounds', [input_file, output_file])
    #run_example(env, 'streaming', 'schizo_extractor', [input_file, output_file])
    run_example(env, 'streaming', 'mfcc', [input_file, output_file])
    run_example(env, 'streaming', 'gfcc', [input_file, output_file])
    run_example(env, 'streaming', 'rhythmextractor', [input_file])
    run_example(env, 'streaming', 'onsetrate', [input_file])
    run_example(env, 'streaming', 'extractorkey', [input_file, output_file])
    run_example(env, 'streaming', 'extractorpitch', [input_file, output_file])
    run_example(env, 'streaming', 'extractorpredominantmelody', [input_file, output_file])
    run_example(env, 'streaming', 'beattrack', [input_file, output_ticks_file])
    if os.path.exists(neq_output_file): os.remove(neq_output_file)
    if os.path.exists(output_file): os.remove(output_file)
    if os.path.exists(output_ticks_file): os.remove(output_ticks_file)
    if os.path.exists(beat_file): os.remove(beat_file)
    sys.exit(0)
