#!/usr/bin/env python

Import('ran_scripts')
current = 'src/examples/python/streaming_extractor/SConscript'
if current in ran_scripts: Return()
ran_scripts.append(current)
testdir = '../../../../test'

import os
import sys
import subprocess
from os.path import join

### Import the environment & the config ###
Import('env', 'conf', 'source_tree_path', 'algorithms', 'relative_path')
env = env.Clone()
bld_dir = join(source_tree_path,'build','examples', 'python', 'streaming_extractor')
src_dir = join(source_tree_path, 'src', 'examples', 'python', 'streaming_extractor')
if 'YamlInput' in algorithms.keys(): env.Append( LIBS=['yaml'] )


### Run dependencies ###
SConscript(join('../../../python','SConscript'))
env.Alias('python_extractor', env.Alias('python_install'))


def run_command(cmd):
    status = subprocess.call(cmd, stdout=subprocess.PIPE)
    if status != 0: 
       sys.exit(status)

def translate(files):
    py_files = [file+'.py' for file in files] 
    cpp_files = ['streaming_extractor'+file+'.cpp' for file in files]
    for i in range(len(files)):
         env.Command(cpp_files[i], py_files[i], translate_to_cpp)
         env.Alias('python_extractor', cpp_files[i])

def translate_to_cpp(target, source, env):
    py_name = str(source[0])
    cpp_name = os.path.basename(str(target[0]))
    h_name = cpp_name.split('.cpp')[0] + '.h'
    audio_file = join(relative_path,'test', 'audio/recorded/britney.wav')
    yaml_file = join(src_dir,'foo.yaml')
    # run the python files to generate cpp code:
    cmd = ['./'+ py_name, '-c', audio_file, yaml_file] 
    run_command(cmd)
    # mv cpp source file to src/examples/python/streaming_extractor:
    cmd = ['mv', join(source_tree_path,cpp_name),join(source_tree_path, str(target[0]))]
    run_command(cmd)
    env.Clean('python_extractor', join(source_tree_path, str(target[0])))
    ## mv cpp header file to src/examples/python/streaming_extractor:
    cmd = ['mv', join(source_tree_path,h_name),join(source_tree_path, str(target[0]).split('.cpp')[0]+'.h')]
    run_command(cmd)
    env.Clean('python_extractor', join(source_tree_path, str(target[0]).split('.cpp')[0]+'.h'))
    ## remove output from running python scripts:
    if os.path.exists(join(src_dir, 'foo.yaml')):
        cmd = ['rm', join(src_dir, 'foo.yaml')]
        run_command(cmd)

#def translate(files):
#    for file in files:
#         translate_to_cpp(file)
#
#def translate_to_cpp(name):
#    py_name = name + '.py'
#    print 'generating c++ code from:', py_name
#    audio_file = join(testdir, 'audio/recorded/britney.wav')
#    cmd = ['./'+py_name, '-c', audio_file, 'foo.yaml'] 
#    status = subprocess.call(cmd, stdout=subprocess.PIPE)
#    if status != 0: 
#       print 'ERROR: translation failed on file:', py_name
#       sys.exit(status)
#    status = subprocess.call(['rm', 'foo.yaml'])

### Build examples ###
def build_example(env, prefix, prog_name, other = []):
    files = [ prefix + '_' + prog_name + '.cpp' ]
    for f in other:
        files += [ prefix + '_' + 'extractor'+ f + '.cpp' ]

    objs = [env.Object(join(bld_dir,f[:-4]), f) for f in files]
    prog = env.Program(join(bld_dir, prefix+'_'+prog_name), objs)
    env.Alias('python_extractor', prog)

    if sys.platform == 'win32':
        # we need to manually embed the manifest
        env.AddPostAction(prog, 'mt.exe -outputresource:"'+join(bld_dir, prefix+'_'+prog_name+'.exe"')+\
                                ';2 -manifest "'+join(bld_dir, prefix+'_'+prog_name)+'.exe.manifest"' )
def cleanup(files=[]):
    ret = 0
    for file in files:
        file = 'streaming_extractor' + file
        env.Clean('python_extractor', file+'.h')
        env.Clean('python_extractor', file+'.cpp')


extractors = ['lowlevelspectral',
              'lowlevelspectraleqloud', 
              'level', 
              'rhythmdescriptors', 
              'tonaldescriptors', 
              'pitch', 
              'tuningfrequency',
              'sfx',
              'panning']

translate(extractors) # this would be the scons way
# hack to not translate when cleaning:
#if not GetOption('clean'): translate(extractors)
env.Alias('python_extractor', build_example(env, 'streaming', 'extractor', (['utils'] + extractors)))
env.Alias('python_extractor', build_example(env, 'streaming', 'schizo_extractor', (['utils'] + extractors)))
## add files to the scons clean function:
cleanup(extractors)

#os.system('cp -r ' + join(src_dir, 'svm_models ') + bld_dir)
