#!/usr/bin/env python
# -*- coding: utf-8 -*-

import distutils.sysconfig
import os
import sys


def options(ctx):
    ctx.load('python')


def configure(ctx):
    pass

def adjust(objs, path):
    return [ '%s/%s' % (path, obj) for obj in objs ]


def build(ctx):
    print('â†’ building from ' + ctx.path.abspath())

    if ctx.env.WITH_EXAMPLES:
        def build_example(prefix, prog_name, other=None):
            files = [ '%s_%s.cpp' % (prefix, f) for f in [prog_name] + (other or []) ]

            ctx.program(source = ctx.path.ant_glob(' '.join(files)),
                        target = '%s_%s' % (prefix, prog_name),
                        includes = [ '.' ] + adjust(ctx.env.INCLUDES, '..'),
                        use      = 'essentia ' + ctx.env.USES,
                        install_path = None)



        build_example('standard', 'beatsmarker')
        build_example('standard', 'tempotap')
        build_example('standard', 'mfcc')
        build_example('standard', 'onsetrate')
        build_example('standard', 'extractorpitch')
        build_example('standard', 'fadedetection')
        build_example('standard', 'spectralcontrast')
        build_example('standard', 'rhythmtransform')

        build_example('streaming', 'extractor',
                                 [ 'extractorutils',
                                   'extractortonal',
                                   'extractorlowlevel',
                                   'extractorbeattrack',
                                   'extractorsfx',
                                   'extractorpanning',
                                   'extractorpostprocess' ])

        build_example('streaming', 'extractor_short_sounds',
                                 [ 'extractorutils',
                                   'extractormetadata',
                                   'extractortonal',
                                   'extractorlowlevel',
                                   'extractorsfx',
                                   'extractorpanning',
                                   'extractorpostprocess' ])

        build_example('streaming', 'schizo_extractor',
                                 [ 'extractorutils',
                                   'extractormetadata',
                                   'extractortonal',
                                   'extractorlowlevel',
                                   'extractorsfx',
                                   'extractorpanning',
                                   'extractorpostprocess' ])

        build_example('streaming', 'extractor_canoris',
                                 [ 'extractorutils',
                                   'extractortonal',
                                   'extractorlowlevel',
                                   'extractorsfx',
                                   'extractorpanning',
                                   'extractorpostprocess' ])


        build_example('streaming', 'beattrack')
        build_example('streaming', 'beatsmarker')
        build_example('streaming', 'mfcc')
        build_example('streaming', 'gfcc')
        build_example('streaming', 'rhythmextractor')
        build_example('streaming', 'onsetrate')
        build_example('streaming', 'panning')
        build_example('streaming', 'tuningfrequency')
        build_example('streaming', 'extractorkey')
        build_example('streaming', 'extractorpitch')
        build_example('streaming', 'extractorpredominantmelody')



    if ctx.env.WITH_VAMP:
        ctx.env.INCLUDES += [ '3rdparty/vamp-plugin-sdk-2.4' ]

        vamp_sdk_files   = ctx.path.parent.ant_glob('3rdparty/vamp-plugin-sdk-2.4/src/vamp-sdk/*.cpp')
        # remove this file, it is already included by FFT.cpp
        vamp_sdk_files = [ f for f in vamp_sdk_files if os.path.basename(f.srcpath()) != 'FFTimpl.cpp' ]

        if sys.platform == 'darwin':
            install_path = os.environ['HOME'] + '/Library/Audio/Plug-Ins/Vamp'
        else:
            install_path = None

        vamp = ctx.shlib(
            source   = ctx.path.ant_glob('vamp*.cpp') + vamp_sdk_files,
            target   = 'vamp_essentia',
            includes = [ '.' ] + adjust(ctx.env.INCLUDES, '..'),
            use      = 'essentia ' + ctx.env.USES,
            install_path = install_path
        )
