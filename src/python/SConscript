#!/usr/bin/env python

Import('ran_scripts')
if 'src/python/SConscript' in ran_scripts: Return()
ran_scripts.append('src/python/SConscript')

import sys
import os
import glob
from os.path import join

### Setup the environment ###
Import('env', 'conf', 'source_tree_path', 'files_in_dir')
python_dir = join(source_tree_path,'src','python')


### Run dependencies ###
SConscript(join('..','SConscript'))


### Setup python build environment ###
bld_dir = join(source_tree_path,'build','python')
env = env.Clone()
env['STATIC_AND_SHARED_OBJECTS_ARE_THE_SAME'] = 1
env['SHLIBPREFIX'] = ''
if sys.platform in ('win32'): env['SHLIBSUFFIX'] = '.pyd'
else: env['SHLIBSUFFIX'] = '.so'

# update includes and libs for building python
env.Append(CPPPATH = [ '.', conf.PYTHON_INCLUDE_PATH, conf.NUMPY_INCLUDE_PATH ])
if not sys.platform in ('linux2'):
    # linux doesnt have a python link path
    env.Append( LIBPATH = [ conf.PYTHON_LINK_PATH ] )

if sys.platform in ('darwin'):
    env.Append(CCFLAGS = [ '-fno-strict-aliasing' , '-Wno-error' ],
               LINKFLAGS = [ '-framework', 'Python' ])

### Building python module ###
# python objects
python_objects = [ env.Object( join(bld_dir,'essentia'), 'essentia.cpp' ) ]
python_objects.append( env.Object( join(bld_dir,'parsing'), 'parsing.cpp' ) )
python_objects += [ env.Object( join(bld_dir,source[:-4]), source ) for source in glob.glob(join('pytypes','*.cpp')) ]

if sys.platform in ('darwin'):
    # in darwin, somehow it doesn't append the suffix:
    module = env.LoadableModule(join(bld_dir,'_essentia.so'), python_objects)
else:
    module = env.LoadableModule(join(bld_dir,'_essentia'), python_objects)

if sys.platform == 'win32':
    # damned scons!
    # we need to manually embed the manifest...
    env.AddPostAction(module, "mt.exe -outputresource:build\\python\\_essentia.pyd;2 -manifest build\\python\\_essentia.pyd.manifest")


env.Alias('python', 'build')
env.Alias('python', module)


### Determine where to install module ###
if sys.platform == 'linux2':
    if conf.PYTHON_VERSION >= '2.6':
        destpython = join(conf.DESTDIR, conf.PREFIX, 'lib', 'python'+conf.PYTHON_VERSION, 'dist-packages', 'essentia')
    else:
        destpython = join(conf.DESTDIR, conf.PREFIX, 'lib', 'python'+conf.PYTHON_VERSION, 'site-packages', 'essentia')

elif sys.platform == 'darwin':
    destpython = join(conf.DESTDIR + conf.PYTHON_INSTALL_PATH,'site-packages','essentia')

elif sys.platform == 'win32':
    destpython = join(conf.DESTDIR,
                      'Python'+conf.PYTHON_VERSION.replace('.',''), 'Lib', 'site-packages','essentia')


### Install the module ###
env.Alias('python_install', 'python')
env.Alias('python_install', env.Install(destpython, module))
python_install_path = join(destpython, '..')
Export('python_install_path')

### On Windows, also copy the .dll files into the python directory ###
if sys.platform == 'win32':
    import glob
    dllfiles = glob.glob(join(conf.THIRDPARTY, 'bin', '*.dll'))
    env.Alias('python_install', [ env.Install(destpython, dllfile) for dllfile in dllfiles ])

### Install the python scripts ###

# Eventually want to use the following line after we clean up the python bindings
#installers += [env.Install(destpython, pyscript) for pyscript in files_in_dir( join(python_dir,'essentia'), '*.py' )]
# For now, just use the following two lines
relevant_pyscripts = [ join(python_dir,'essentia',name+'.py') for name in ('algorithms','common','__init__','streaming','utils','standard','translate') ]
python_install_alias = env.Alias( 'python_install',
                                  [ env.Install(destpython, pyscript) for pyscript in relevant_pyscripts ] )

Export('python_install_alias')
