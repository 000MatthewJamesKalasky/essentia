#!/usr/bin/env python

import sys
from os.path import join

Import('source_tree_path', 'files_in_dir', 'env', 'conf')
env = env.Clone()

# gather header and object files from the 'streaming' dir
#streaming_dir = join(source_tree_path,'src','streaming' )
streaming_dir = '.'
bld_dir = join(source_tree_path,'build','streaming')

# relevant header files
headers = files_in_dir(streaming_dir, '*.h')
headers += files_in_dir(join(streaming_dir,'algorithms'), '*.h')

# header installers
if sys.platform in ('win32'):
    INCLUDE_PATH = join(conf.DESTDIR, conf.PREFIX, 'include')
else:
    INCLUDE_PATH = join(conf.DESTDIR, conf.PREFIX, 'include', 'essentia')
installers = [env.Install( INCLUDE_PATH, header ) for header in headers]

# relevant objects
objects = [env.Object(join(bld_dir,source[:-4]), source) for source in files_in_dir(streaming_dir, '*.cpp')]
objects += [env.Object(join(bld_dir,source[:-4]), source) for source in files_in_dir(join(streaming_dir,'algorithms'), '*.cpp')]

# return results
result = (installers, objects)
Return('result')
