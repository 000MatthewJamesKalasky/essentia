#!/usr/bin/env python

import os, sys, glob
from os.path import join

Import('env', 'conf', 'source_tree_path', 'build_sh_cmd')

### Set up dependencies ###
SConscript(join(source_tree_path,'src','SConscript'))


### Set up env ###
env = env.Clone()

cpptest_path = join(source_tree_path, 'test', 'src', 'basetest')
cpptest_output_dir = join(source_tree_path, 'build', 'test')
cpptest_output_prog = join(cpptest_output_dir, 'basetest')

env.Append(CPPPATH = [ cpptest_path ])
env.Append(LIBS = [ 'gtest', 'gtest', 'pthread' ])


### Get all test files ###
testFiles = glob.glob('test_*.cpp')

### Build the main test program ###
env.Alias('tests',
          env.Program(cpptest_output_prog, testFiles))



runCppTestsCmd = build_sh_cmd(env, 'run_tests_cmd', cpptest_output_prog, [],
                              exec_dir = join(os.getcwd(), '..', '..', '..'))
env.Alias('run_tests', runCppTestsCmd)

# need to build the tests before running them
env.Depends(runCppTestsCmd, 'tests')

### Nice informative message ###
if 'run_tests' in COMMAND_LINE_TARGETS:
    print '*'*100
    print 'Please run the test program directly using the "%s" command to have a colored output' % cpptest_output_prog
    print '*'*100
